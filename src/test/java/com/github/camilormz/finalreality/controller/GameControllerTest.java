package com.github.camilormz.finalreality.controller;

import com.github.camilormz.finalreality.model.character.Enemy;
import com.github.camilormz.finalreality.model.character.ICharacter;
import com.github.camilormz.finalreality.model.character.player.characterclass.*;
import com.github.camilormz.finalreality.model.weapon.types.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Test class that holds everything related to the controller
 *
 * @author Camilo Ram√≠rez Canales
 */
public class GameControllerTest {

    private GameController controller;
    private BlockingQueue<ICharacter> turns;

    // Constant Strings for character names
    private final String BLACK_MAGE_NAME = "Nix";
    private final String ENGINEER_NAME = "Tesla";
    private final String KNIGHT_NAME = "Steel";
    private final String THIEF_NAME = "Bonnie";
    private final String WHITE_MAGE_NAME = "Lux";

    private final String AXE_NAME = "Wood Slayer";
    private final String BOW_NAME = "The Trebuchet";
    private final String KNIFE_NAME = "Stealthy";
    private final String STAFF_NAME = "Shadowmaker";
    private final String SWORD_NAME = "Infidel Redentor";

    private final String ENEMY_NAME = "Kronos";

    // Characters generated directly by model constructors
    private BlackMage modelBlackMage;
    private Engineer modelEngineer;
    private Knight modelKnight;
    private Thief modelThief;
    private WhiteMage modelwhiteMage;

    private Enemy modelEnemy;

    private Axe modelAxe;
    private Bow modelBow;
    private Knife modelKnife;
    private Staff modelStaff;
    private Sword modelSword;

    // Characters generated by the controller
    private BlackMage controllerBlackMage;
    private Engineer controllerEngineer;
    private Knight controllerknight;
    private Thief controllerThief;
    private WhiteMage controllerwhiteMage;

    private Enemy controllerEnemy;

    private Axe controllerAxe;
    private Bow controllerBow;
    private Knife controllerKnife;
    private Staff controllerStaff;
    private Sword controllerSword;

    // Default values for test characters
    private final int DEFAULT_HEALTH_POINTS = 100;
    private final int DEFAULT_DEFENSE = 2;
    private final int DEFAULT_ENEMY_WEIGHT = 10;
    private final int DEFAULT_WEAPON_WEIGHT = 10;
    private final int DEFAULT_ENEMY_DAMAGE = 10;
    private final int DEFAULT_WEAPON_DAMAGE = 10;
    private final int DEFAULT_MAGIC_DAMAGE = 10;

    /**
     * Initializes every variable necessary to do the tests, e.g., characters, weapons,
     * the controller, the turns queue among others
     */
    @BeforeEach
    void setUp() {
        controller = new GameController();
        turns = new LinkedBlockingQueue<>();

        modelBlackMage = new BlackMage(BLACK_MAGE_NAME, DEFAULT_HEALTH_POINTS,
                                       DEFAULT_DEFENSE, turns);
        modelEngineer = new Engineer(ENGINEER_NAME, DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE, turns);
        modelKnight = new Knight(KNIGHT_NAME, DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE, turns);
        modelThief = new Thief(THIEF_NAME, DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE, turns);
        modelwhiteMage = new WhiteMage(WHITE_MAGE_NAME, DEFAULT_HEALTH_POINTS,
                                       DEFAULT_DEFENSE, turns);

        modelEnemy = new Enemy(ENEMY_NAME, DEFAULT_ENEMY_WEIGHT, DEFAULT_HEALTH_POINTS,
                               DEFAULT_DEFENSE, DEFAULT_ENEMY_DAMAGE, turns);

        modelAxe = new Axe(AXE_NAME, DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
        modelBow = new Bow(BOW_NAME, DEFAULT_WEAPON_DAMAGE, DEFAULT_ENEMY_WEIGHT);
        modelKnife = new Knife(KNIFE_NAME, DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
        modelStaff = new Staff(STAFF_NAME, DEFAULT_WEAPON_DAMAGE,
                               DEFAULT_WEAPON_WEIGHT, DEFAULT_MAGIC_DAMAGE);
        modelSword = new Sword(SWORD_NAME, DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);

        controllerBlackMage = controller.createBlackMage(BLACK_MAGE_NAME,
                                                         DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE);
        controllerEngineer = controller.createEngineer(ENGINEER_NAME,
                                                       DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE);
        controllerknight = controller.createKnight(KNIGHT_NAME,
                                                   DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE);
        controllerThief = controller.createThief(THIEF_NAME,
                                                 DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE);
        controllerwhiteMage = controller.createWhiteMage(WHITE_MAGE_NAME,
                                                         DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE);

        controllerEnemy = controller.createEnemy(ENEMY_NAME, DEFAULT_ENEMY_WEIGHT,
                                                 DEFAULT_HEALTH_POINTS, DEFAULT_DEFENSE,
                                                 DEFAULT_ENEMY_DAMAGE);

        controllerAxe = controller.createAxe(AXE_NAME,
                                             DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
        controllerBow = controller.createBow(BOW_NAME,
                                             DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
        controllerKnife = controller.createKnife(KNIFE_NAME,
                                               DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
        controllerStaff = controller.createStaff(STAFF_NAME, DEFAULT_WEAPON_DAMAGE,
                                                 DEFAULT_WEAPON_WEIGHT, DEFAULT_MAGIC_DAMAGE);
        controllerSword = controller.createSword(SWORD_NAME,
                                                 DEFAULT_WEAPON_DAMAGE, DEFAULT_WEAPON_WEIGHT);
    }

    /**
     * Tests that the controller can create the model elements (playable characters, enemies and
     * weapons) as exactly as their respective constructor does
     */
    @Test
    void controllerCreationTest() {
        assertEquals(controllerBlackMage, modelBlackMage);
        assertEquals(controllerEngineer, modelEngineer);
        assertEquals(controllerknight, modelKnight);
        assertEquals(controllerThief, modelThief);
        assertEquals(controllerwhiteMage, modelwhiteMage);

        assertEquals(controllerEnemy, modelEnemy);

        assertEquals(controllerAxe, modelAxe);
        assertEquals(controllerBow, modelBow);
        assertEquals(controllerKnife, modelKnife);
        assertEquals(controllerStaff, modelStaff);
        assertEquals(controllerSword, modelSword);
    }
}
